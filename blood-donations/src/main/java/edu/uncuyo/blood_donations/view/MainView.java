package edu.uncuyo.blood_donations.view;

import edu.uncuyo.blood_donations.dao.BloodDonationDAOImpl;
import edu.uncuyo.blood_donations.dao.DAOImpl;
import edu.uncuyo.blood_donations.entity.BloodDonation;
import edu.uncuyo.blood_donations.entity.BloodDonor;
import java.util.ArrayList;
import java.util.UUID;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author adrian
 */
public class MainView extends JFrame {

    private final DAOImpl<BloodDonor, UUID> bloodDonorDAO;
    private final BloodDonationDAOImpl bloodDonationDAO;
    private ArrayList<BloodDonor> bloodDonors = new ArrayList();
    private ArrayList<BloodDonation> bloodDonations = new ArrayList();
    private int selectedBloodDonorRow = -1;
    private int selectedBloodDonationRow = -1;

    /**
     * Creates new form MainView
     */
    public MainView(DAOImpl<BloodDonor, UUID> bloodDonorDAO, BloodDonationDAOImpl bloodDonationDAO) {
        this.bloodDonorDAO = bloodDonorDAO;
        this.bloodDonationDAO = bloodDonationDAO;
        initComponents();
        bloodDonorTable.getSelectionModel().addListSelectionListener(this::handleBloodDonorRowSelected);
        bloodDonationTable.getSelectionModel().addListSelectionListener(this::handleBloodDonationRowSelected);
        updateBloodDonors();
        setVisible(true);
    }

    public void updateBloodDonors() {
        bloodDonors = new ArrayList(bloodDonorDAO.read());
        updateBloodDonorTable();
    }

    public void updateBloodDonorTable() {
        var tableModel = (DefaultTableModel) bloodDonorTable.getModel();
        tableModel.setRowCount(0);
        bloodDonors.forEach((t) -> {
            tableModel.addRow(new Object[]{
                t.getDni(),
                t.getName(),
                t.getSurname(),
                t.getEmail(),
                t.getDateOfBirth()
            });
        });
    }

    public void updateBloodDonations() {
        if (selectedBloodDonorRow == -1) {
            return;
        }
        bloodDonations = new ArrayList(bloodDonationDAO.findByBloodDonorId(bloodDonors.get(selectedBloodDonorRow).getId()));
        updateBloodDonationTable();
    }

    public void updateBloodDonationTable() {
        var tableModel = (DefaultTableModel) bloodDonationTable.getModel();
        tableModel.setRowCount(0);
        for (var bloodDonation : bloodDonations) {
            var aboGroup = bloodDonation.getAboGroup();
            var rhdGroup = bloodDonation.getRhdGroup();
            var grupoSanguineo = (aboGroup == null ? "desconocido" : aboGroup.toString()) + " " + (rhdGroup == null ? "desconocido" : rhdGroup.ordinal() == 0 ? "+" : "-");
            tableModel.addRow(new Object[]{
                bloodDonation.getTimestamp(),
                bloodDonation.getType(),
                bloodDonation.getAmount(),
                bloodDonation.getSelfExclusion(),
                bloodDonation.getApt(),
                grupoSanguineo
            });
        }
    }

    private void handleBloodDonorRowSelected(ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            selectedBloodDonorRow = bloodDonorTable.getSelectedRow();
        }
    }

    private void handleBloodDonationRowSelected(ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            selectedBloodDonationRow = bloodDonationTable.getSelectedRow();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        bloodDonorTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        bloodDonationTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        clinicalScreeningTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestión de Donaciones de Sangre");
        setExtendedState(6);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        createButton.setText("Alta");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        jPanel1.add(createButton);

        deleteButton.setText("Baja");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);

        updateButton.setText("Modificación");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton);

        getContentPane().add(jPanel1);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jScrollPane1.setName(""); // NOI18N

        bloodDonorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Apellido", "E-Mail", "Fecha de Nacimiento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bloodDonorTable);

        jTabbedPane1.addTab("Donantes", jScrollPane1);

        bloodDonationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha y Hora", "Tipo", "Cantidad", "Auto Exclusión", "Apta", "Grupo Sanguíneo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bloodDonationTable);

        jTabbedPane1.addTab("Donaciones", jScrollPane2);

        clinicalScreeningTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha y Hora", "Temperatura", "Peso", "Presión Sistólica", "Presión Diastólica", "Apto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(clinicalScreeningTable);

        jTabbedPane1.addTab("Calificación Clínica", jScrollPane3);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        var selectedTab = jTabbedPane1.getSelectedIndex();
        switch (selectedTab) {
            case 0 ->
                new CreateBloodDonorForm(this, true, bloodDonorDAO);
            case 1 -> {
                if (selectedBloodDonorRow == -1) {
                    return;
                }
                new CreateBloodDonationForm(this, true, bloodDonationDAO, bloodDonors.get(selectedBloodDonorRow));
            }
            default ->
                JOptionPane.showMessageDialog(this, "Not implemented yet");
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (selectedBloodDonorRow == -1) {
            return;
        }
        var selectedTab = jTabbedPane1.getSelectedIndex();
        switch (selectedTab) {
            case 0:
                var bloodDonor = bloodDonors.get(selectedBloodDonorRow);
                if (JOptionPane.showConfirmDialog(this,
                        "Confirmar baja del donante con DNI: " + bloodDonor.getDni().toString(),
                        "Confirmar Baja",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    bloodDonorDAO.delete(bloodDonor.getId());
                }
                updateBloodDonors();
                break;
            case 1:
                if (selectedBloodDonationRow == -1) {
                    return;
                }
                var bloodDonation = bloodDonations.get(selectedBloodDonorRow);
                if (JOptionPane.showConfirmDialog(this,
                        "Confirmar baja de la donación",
                        "Confirmar Baja",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    bloodDonationDAO.delete(bloodDonation.getId());
                }
                updateBloodDonations();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Not implemented yet");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (selectedBloodDonorRow == -1) {
            return;
        }
        var selectedTab = jTabbedPane1.getSelectedIndex();
        switch (selectedTab) {
            case 0 ->
                new UpdateBloodDonorForm(this, true, bloodDonorDAO, bloodDonors.get(selectedBloodDonorRow));
            case 1 -> {
                if (selectedBloodDonationRow == -1) {
                    return;
                }
                new UpdateBloodDonationForm(this, true, bloodDonationDAO, bloodDonations.get(selectedBloodDonationRow));
            }
            default ->
                JOptionPane.showMessageDialog(this, "Not implemented yet");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (selectedBloodDonorRow == -1) {
            return;
        }
        var sourceTabbedPane = (JTabbedPane) evt.getSource();
        int selectedTab = sourceTabbedPane.getSelectedIndex();
        switch (selectedTab) {
            case 1 ->
                updateBloodDonations();
            default -> {
                return;
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bloodDonationTable;
    private javax.swing.JTable bloodDonorTable;
    private javax.swing.JTable clinicalScreeningTable;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
